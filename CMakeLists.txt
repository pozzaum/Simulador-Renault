#Project configuration, auto-generated by Qt
cmake_minimum_required(VERSION 3.5)

project(simulador_rota2030_renault VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#Determination of the Build Configuration Types available, which can be chosen through the Qt Creator User Interface before building/running
set(CMAKE_CONFIGURATION_TYPES "${CMAKE_BUILD_TYPE}")


#Choice of which Qt components will be bundled with the application at build phase
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets LinguistTools WebSockets)
find_package(Qt6 REQUIRED COMPONENTS Core Mqtt)

#Setting the name and path of the translation files
set(TS_FILES simulador_rota2030_renault_en_US.ts)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui
        ${TS_FILES}
)
set(ALL_SOURCES Cabin BatEvap Condenser DoubleEvap Compressor ExpDevice PowerTrain MqttConnect)

#Configuration for CoolProps and fparser libraries
set(COOLPROP_STATIC_LIBRARY ON)
set(FP_USE_STRTOLD ON)
set(FP_SUPPORT_CPLUSPLUS11_MATH_FUNCS ON)
set(FP_SUPPORT_OPTIMIZER ON)

set(USE_WEBSOCKETS FALSE)
set(USE_MQTT ON)


add_subdirectory ("./externals/CoolProps" CoolProp)
add_subdirectory ("./externals/fparser" fparser)
add_subdirectory ("./HeatExchanger" HXC)
add_subdirectory ("./HeatExchanger/BatteryEvaporator" BatEvap)
add_subdirectory ("./HeatExchanger/Condenser" Condenser)
add_subdirectory ("./HeatExchanger/DoubleEvaporator" DoubleEvap)
add_subdirectory ("./Compressor" Compressor)
add_subdirectory ("./ExpansionDevice" ExpDevice)
add_subdirectory ("./Cabin" Cabin)
add_subdirectory ("./PowerTrain" PowerTrain)
add_subdirectory ("./MqttConnect" MqttConnect)
add_subdirectory ("./WebSocketWorker" WebSocketWorker)


include(GNUInstallDirs)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    #Builds the general .cpp files of the project
    qt_add_executable(simulador_rota2030_renault
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
        filereader.h filereader.cpp
        plotter.h
        rtplotter.py
    )

    # Define target properties for Android with Qt 6 as:
    #    set_property(TARGET simulador_rota2030_renault APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
    #                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
    # For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation

    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
else()
    if(ANDROID)
        add_library(simulador_rota2030_renault SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(simulador_rota2030_renault
            ${PROJECT_SOURCES}
        )
    endif()

    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
endif()

#This part is responsible for building and linking the necessary libraries and subdirectories
#By default, it builds and links both external libraries (CoolProp and fparser)
#Then, it builds the specific .cpp files for the chosen AC component. It verifies if the $<CONFIG:"name_of_component"> has been chosen before generation phase (when CMake is ran).
#If it has been defined, the generator will write the name of the subdirectory, which tells CMake to build and link that subdirectory.
#As, theoretically, only one component type can be chosen at time, only one of the $<CONFIG:"name_of_component"> will return the name of the subdirectory
#If All_debug or All_release has been chosen as the Build Configuration Type, it will use the ALL_SOURCES variable which has been defined previously.
#This variable contains the name of all the subdirectories needed to run the complete AC system simulation


target_link_libraries(simulador_rota2030_renault PUBLIC
    fparser
    CoolProp
    $<$<CONFIG:DoubleEvap_debug>:DoubleEvap>
    $<$<CONFIG:DoubleEvap_release>:DoubleEvap>
    $<$<CONFIG:ExpDev_debug>:ExpDevice>
    $<$<CONFIG:ExpDev_release>:ExpDevice>
    $<$<CONFIG:Cond_debug>:Condenser>
    $<$<CONFIG:Cond_release>:Condenser>
    $<$<CONFIG:Comp_debug>:Compressor>
    $<$<CONFIG:Comp_release>:Compressor>
    $<$<CONFIG:BatEvap_debug>:BatEvap>
    $<$<CONFIG:BatEvap_release>:BatEvap>
    $<$<CONFIG:Cabin_debug>:Cabin>
    $<$<CONFIG:Cabin_release>:Cabin>
    $<$<CONFIG:HeatEx_debug>:HXC DoubleEvap>
    $<$<CONFIG:HeatEx_release>:HXC DoubleEvap>
    $<$<CONFIG:PowerTrain_debug>:PowerTrain>
    $<$<CONFIG:PowerTrain_release>:PowerTrain>
    $<$<CONFIG:MqttConnect_debug>:MqttConnect>
    $<$<CONFIG:MqttConnect_release>:MqttConnect>
    $<$<CONFIG:All_debug>:${ALL_SOURCES}>
    $<$<CONFIG:All_release>:${ALL_SOURCES}>
    $<$<BOOL:${USE_WEBSOCKETS}>:WebSocketWorker Qt6::WebSockets>
    $<$<BOOL:${USE_MQTT}>:MqttConnect Qt6::Mqtt>
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Mqtt
    Qt${QT_VERSION_MAJOR}::Core
)

target_include_directories(simulador_rota2030_renault PUBLIC "${PROJECT_BINARY_DIR}")


# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.simulador_rota2030_renault)
endif()

#This part defines the preprocessor variables. It uses the same idea used at the building and linking part, but instead of writing the subdirectory name,
#it writes the variable name which mainwindow.cpp will use to tell which lines of code should be compiled or not.
target_compile_definitions(simulador_rota2030_renault PRIVATE
    $<$<CONFIG:DoubleEvap_debug>:DOUBLEEVAP>
    $<$<CONFIG:DoubleEvap_release>:DOUBLEEVAP>
    $<$<CONFIG:ExpDev_debug>:EXPDEVICE>
    $<$<CONFIG:ExpDev_release>:EXPDEVICE>
    $<$<CONFIG:Cond_debug>:CONDENSER>
    $<$<CONFIG:Cond_release>:CONDENSER>
    $<$<CONFIG:Comp_debug>:COMPRESSOR>
    $<$<CONFIG:Comp_release>:COMPRESSOR>
    $<$<CONFIG:BatEvap_debug>:BATEVAP>
    $<$<CONFIG:BatEvap_release>:BATEVAP>
    $<$<CONFIG:Cabin_debug>:CABIN>
    $<$<CONFIG:Cabin_release>:CABIN>
    $<$<CONFIG:HeatEx_debug>:HXC DEBUG_FLAG=1>
    $<$<CONFIG:HeatEx_release>:HXC>
    $<$<CONFIG:PowerTrain_debug>:POWERTRAIN>
    $<$<CONFIG:PowerTrain_release>:POWERTRAIN>
    $<$<CONFIG:MqttConnect_debug>:MQTTCONNECT>
    $<$<CONFIG:MqttConnect_release>:MQTTCONNECT>
    $<$<CONFIG:All_debug>:ALL>
    $<$<CONFIG:All_release>:ALL>
    $<$<BOOL:${USE_WEBSOCKETS}>:USE_WEBSOCKETS>
    $<$<BOOL:${USE_MQTT}>:USE_MQTT>
)
set_target_properties(simulador_rota2030_renault PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)


install(TARGETS simulador_rota2030_renault
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(simulador_rota2030_renault)
endif()

